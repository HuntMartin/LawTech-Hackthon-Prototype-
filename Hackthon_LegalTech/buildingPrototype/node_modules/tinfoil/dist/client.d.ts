import type { Chat, Files, FineTuning, Images, Audio, Embeddings, Models, Moderations, Beta } from 'openai/resources';
/**
 * TinfoilAI is a wrapper around the OpenAI API client that adds additional
 * security measures through enclave verification and certificate fingerprint validation.
 *
 * It provides:
 * - Automatic verification of Tinfoil secure enclaves
 * - Certificate fingerprint validation for each request
 * - Type-safe access to OpenAI's chat completion APIs
 */
interface TinfoilAIOptions {
    apiKey?: string;
    [key: string]: any;
}
export declare class TinfoilAI {
    private client?;
    private groundTruth?;
    private clientPromise;
    private readyPromise?;
    /**
     * Creates a new TinfoilAI instance.
     * @param options - Configuration options including apiKey and other OpenAI client options
     */
    constructor(options?: TinfoilAIOptions);
    /**
     * Ensures the client is ready to use.
     * @returns Promise that resolves when the client is initialized
     */
    ready(): Promise<void>;
    private initClient;
    private createOpenAIClient;
    /**
     * Helper method to ensure the OpenAI client is initialized before use.
     * Automatically calls ready() if needed.
     * @returns The initialized OpenAI client
     * @private
     */
    private ensureReady;
    /**
     * Access to OpenAI's chat completions API for creating chat conversations.
     * Automatically initializes the client if needed.
     */
    get chat(): Chat;
    /**
     * Access to OpenAI's files API for managing files used with the API.
     * Automatically initializes the client if needed.
     */
    get files(): Files;
    /**
     * Access to OpenAI's fine-tuning API for creating and managing fine-tuned models.
     * Automatically initializes the client if needed.
     */
    get fineTuning(): FineTuning;
    /**
     * Access to OpenAI's image generation and editing API.
     * Automatically initializes the client if needed.
     */
    get images(): Images;
    /**
     * Access to OpenAI's audio API for speech-to-text and text-to-speech.
     * Automatically initializes the client if needed.
     */
    get audio(): Audio;
    /**
     * Access to OpenAI's embeddings API for creating vector embeddings of text.
     * Automatically initializes the client if needed.
     */
    get embeddings(): Embeddings;
    /**
     * Access to OpenAI's models API for listing and managing available models.
     * Automatically initializes the client if needed.
     */
    get models(): Models;
    /**
     * Access to OpenAI's content moderation API.
     * Automatically initializes the client if needed.
     */
    get moderations(): Moderations;
    /**
     * Access to OpenAI's beta features.
     * Automatically initializes the client if needed.
     */
    get beta(): Beta;
}
export {};
