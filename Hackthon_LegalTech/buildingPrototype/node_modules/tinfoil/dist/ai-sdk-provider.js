"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTinfoilAI = createTinfoilAI;
const openai_compatible_1 = require("@ai-sdk/openai-compatible");
const secure_client_1 = require("./secure-client");
const config_1 = require("./config");
const undici_1 = require("undici");
const node_tls_1 = require("node:tls");
const node_crypto_1 = require("node:crypto");
/**
 * Creates an AI SDK provider with the specified API key.
 *
 * @param apiKey - The API key for the Tinfoil API
 * @returns A TinfoilAI instance
 */
async function createTinfoilAI(apiKey) {
    const sc = new secure_client_1.SecureClient();
    const groundTruth = await sc.verify();
    const connect = (0, undici_1.buildConnector)({
        checkServerIdentity: (host, cert) => {
            if (!cert.pubkey) {
                throw new Error('No public key available in certificate');
            }
            const x509 = new node_crypto_1.X509Certificate(cert.raw);
            const publicKeyDer = x509.publicKey.export({
                type: 'spki',
                format: 'der'
            });
            const pubKeyFP = (0, node_crypto_1.createHash)('sha256').update(publicKeyDer).digest('hex');
            if (pubKeyFP !== groundTruth.publicKeyFP) {
                throw new Error(`Certificate public key fingerprint mismatch. Expected: ${groundTruth.publicKeyFP}, Got: ${pubKeyFP}`);
            }
            return (0, node_tls_1.checkServerIdentity)(host, cert);
        }
    });
    const agent = new undici_1.Agent({ connect });
    return (0, openai_compatible_1.createOpenAICompatible)({
        name: "tinfoil",
        baseURL: config_1.TINFOIL_CONFIG.INFERENCE_BASE_URL.replace(/\/$/, ''),
        apiKey: apiKey,
        fetch: (async (input, init) => {
            if (!init) {
                init = {};
            }
            init.dispatcher = agent;
            return await (0, undici_1.fetch)(input, init);
        }),
    });
}
